**O(n) String Building**

Strings are immutable in most languages, so concatenating a character to a string is an O(n) operation. For example, for a 1-million-character string, adding one more character requires copying all 1 million characters to a new string.

Building a string character by character with concatenation:
Total operations = 1 + 2 + 3 + ... + n = O(n^2). This is because each step involves copying the string, making simple concatenation inefficient (O(n^2)).

Better approach (O(n) time):
Use data structures like lists (in Python) to build strings efficiently.

Python Example:
Use a list to collect characters:
- Adding a character to a list is O(1) per operation.
- For n operations, this is O(n) in total.

Convert the list to a string:
- Use "".join(list) to merge the list into a single string.
- This operation is also O(n).

Total time complexity: O(n + n) = O(2n) = O(n).

Code Example (Python):
def build_string(s):
    arr = []  # Step 1: Declare a list
    for c in s:
        arr.append(c)  # Step 2: Add characters to the list

    return "".join(arr)  # Step 3: Convert list to string

This method ensures efficient string building in O(n) time.



Subarrays/Substrings, Subsequences, and Subsets
Subarrays/Substrings
Definition: Contiguous section of an array or string.
Common problem types:
- Sum constraints: Greater than/less than ùëò k.
- Element restrictions: Max ùëò k unique elements, no duplicates, etc.
- Length constraints: Minimum/maximum length.
- Other objectives: Max/min sum, count of subarrays.
Techniques:
- Use sliding window for efficient traversal (but verify if it's the right fit).
- For multiple subarray sums, consider prefix sums for optimization.
Notes:
- Size of subarray between indices i and j (inclusive) = j‚àíi+1.

Subsequences
Definition: A set of elements keeping the same relative order (not necessarily contiguous).
Example: Subsequences of [1,2,3,4] ‚Üí [1,3], [4], [], [2,3], but not [3,2].
Characteristics:
- Order matters, but continuity doesn't.
- Often more difficult than subarray problems.
Patterns (learned so far):
- Two pointers for problems involving two input arrays/strings.
- Prefix sums and sliding windows are not applicable.
Future techniques: Subsequence problems often require dynamic programming.

Subsets
Definition: Any set of elements from the original array or string.
Order doesn't matter, and elements don‚Äôt need to be beside each other.
Example: Subsets of [1,2,3,4] ‚Üí [3,2], [4,1,2], [1].
Note: Subsets with the same elements are considered identical ([1,2,4]=[4,1,2]).
Difference from subsequences:
- Subsets: Order doesn‚Äôt matter.
- Subsequences: Order does matter.
Key Notes:
- If order doesn‚Äôt matter in a subsequence problem (e.g., sum of subsequences), treat it as a subset.
- Subsets allow you to sort the input, while subsequences do not.
- Subsets are commonly used in backtracking problems.

- Arrays have O(1) random access, while strings have O(n) random access. This is because arrays store elements contiguously in memory, while strings store characters in a character array



Hash Maps
A hash map is an unordered data structure that stores key-value pairs. A hash map can add and remove elements in O(1), as well as update values associated with a key and check if a key exists, also in 
O(1). You can iterate over both the keys and values of a hash map, but the iteration won't necessarily follow any order (there are many implementations and this is language dependent for the built-in types).

An ordered data structure is one where the insertion order is "remembered". An unordered data structure is one where the insertion order is not relevant.


A set is another data structure that is very similar to a hash table. It uses the same mechanism for hashing keys into integers. The difference between a set and hash table is that sets do not map their keys to anything. 
Sets are more convenient to use when you only care about checking if elements exist. You can add, remove, and check if an element exists in a set all in O(1).

And Sets duplicate elements are ignored: If you try to add the same element multiple times, it will only be stored once.
Meaning frequency of elements is not tracked: Unlike lists or other data structures, sets do not keep count of how many times an element is added. The element is simply present or absent in the set.
